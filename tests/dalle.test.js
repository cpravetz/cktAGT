// Generated by CodiumAI


const DallE = require('./../models/dalle.js');


/*
Code Analysis

Main functionalities:
The DallE class represents a Dall-E model and provides a method to generate an image using the model. It extends the Model class and uses the OpenAI API to generate the image. The class takes an API key as a parameter and creates an instance of the OpenAIApi class with the configuration. The generate method takes a prompt and options as parameters and returns the URL of the generated image.

Methods:
- constructor(apiKey): creates a new Dall-E model instance with the given API key.
- generate(prompt, options): generates an image using the Dall-E model with the given prompt and options. Returns the URL of the generated image.

Fields:
- name: the name of the model (set to 'DallE').
- configuration: the OpenAI API configuration.
- openAiApiClient: the OpenAI API instance.
- DEFAULT_MAX_WIDTH: default value for max_width option.
- DEFAULT_MAX_HEIGHT: default value for max_height option.
- DEFAULT_N: default value for n option.
*/



describe('DallE_class', () => {

    // Tests that the generate method returns a valid URL when called with default options. 
    it("test_generate_image_default_options", async () => {
        // Arrange
        const apiKey = "testApiKey";
        const prompt = "testPrompt";
        const expectedUrl = "https://testurl.com";
        const openAiApiClientMock = {
            Image: {
                create: jest.fn().mockResolvedValue({ data: { data: [{ url: expectedUrl }] } })
            }
        };
        const DallEClass = new DallE(apiKey);
        DallEClass.openAiApiClient = openAiApiClientMock;

        // Act
        const result = await DallEClass.generate(prompt, {});

        // Assert
        expect(result).toBe(expectedUrl);
        expect(openAiApiClientMock.Image.create).toHaveBeenCalledWith({
            prompt,
            n: 1,
            size: "1024x1024"
        });
    });

    // Tests that the generate method returns a valid URL when called with custom options. 
    it("test_generate_image_custom_options", async () => {
        // Arrange
        const apiKey = "testApiKey";
        const prompt = "testPrompt";
        const expectedUrl = "https://testurl.com";
        const openAiApiClientMock = {
            Image: {
                create: jest.fn().mockResolvedValue({ data: { data: [{ url: expectedUrl }] } })
            }
        };
        const DallEClass = new DallE(apiKey);
        DallEClass.openAiApiClient = openAiApiClientMock;
        const options = {
            max_width: 512,
            max_height: 512,
            n: 2
        };

        // Act
        const result = await DallEClass.generate(prompt, options);

        // Assert
        expect(result).toBe(expectedUrl);
        expect(openAiApiClientMock.Image.create).toHaveBeenCalledWith({
            prompt,
            n: options.n,
            size: `${options.max_width}x${options.max_height}`
        });
    });

    // Tests that the generate method throws an error when called with max_width and max_height set to 0. 
    it("test_generate_image_max_width_and_max_height_zero", async () => {
        // Arrange
        const apiKey = "testApiKey";
        const prompt = "testPrompt";
        const DallEClass = new DallE(apiKey);
        const options = {
            max_width: 0,
            max_height: 0
        };

        // Act & Assert
        await expect(DallEClass.generate(prompt, options)).rejects.toThrow("Failed to generate image");
    });

    // Tests that the generate method throws an error when called with n set to 0. 
    it("test_generate_image_n_zero", async () => {
        // Arrange
        const apiKey = "testApiKey";
        const prompt = "testPrompt";
        const DallEClass = new DallE(apiKey);
        const options = {
            n: 0
        };

        // Act & Assert
        await expect(DallEClass.generate(prompt, options)).rejects.toThrow("Failed to generate image");
    });

    // Tests that the generate method throws an error when image generation fails. 
    it("test_generate_image_failure", async () => {
        // Arrange
        const apiKey = "testApiKey";
        const prompt = "testPrompt";
        const openAiApiClientMock = {
            Image: {
                create: jest.fn().mockRejectedValue(new Error("Failed to generate image"))
            }
        };
        const DallEClass = new DallE(apiKey);
        DallEClass.openAiApiClient = openAiApiClientMock;

        // Act & Assert
        await expect(DallEClass.generate(prompt, {})).rejects.toThrow("Failed to generate image");
    });

    // Tests that the generate method sets default values for max_width, max_height, and n when called with non-integer values for these options. 
    it("test_generate_image_non_integer_options", async () => {
        // Arrange
        const apiKey = "testApiKey";
        const prompt = "testPrompt";
        const expectedUrl = "https://testurl.com";
        const openAiApiClientMock = {
            Image: {
                create: jest.fn().mockResolvedValue({ data: { data: [{ url: expectedUrl }] } })
            }
        };
        const DallEClass = new DallE(apiKey);
        DallEClass.openAiApiClient = openAiApiClientMock;
        const options = {
            max_width: "not an integer",
            max_height: "not an integer",
            n: "not an integer"
        };

        // Act
        const result = await DallEClass.generate(prompt, options);

        // Assert
        expect(result).toBe(expectedUrl);
        expect(openAiApiClientMock.Image.create).toHaveBeenCalledWith({
            prompt,
            n: DallE.DEFAULT_N,
            size: `${DallE.DEFAULT_MAX_WIDTH}x${DallE.DEFAULT_MAX_HEIGHT}`
        });
    });
});
