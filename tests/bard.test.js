// Generated by CodiumAI

const dotenv = require("dotenv").config();
const BardAI = require('./../models/bard.js');
const fetch =  require('node-fetch');
const logger = require('./../constants/logger.js');


/*
Code Analysis

Main functionalities:
The BardAI class is a model that generates responses to messages using Google's Bard chatbot. It initializes a session with the Bard server, generates a unique identifier, and sends messages to the server to receive responses. The class also formats the responses into markdown and extracts relevant data from the response.

Methods:
- constructor(options): initializes the class with a session object containing headers and a base URL.
- async init(): initializes the session by sending a GET request to the Bard server and extracting a unique identifier.
- async generate(message, parameters): sends a POST request to the Bard server with a message and optional parameters, and returns a formatted response object.
- formatMarkdown(text, images): formats the response text with markdown based on any included images.

Fields:
- session: an object containing headers and a base URL for the Bard server.
- SNlM0e: a unique identifier generated during initialization.
- name: a string representing the name of the chatbot (set to 'Bard').
- initialized: a boolean indicating whether the session has been initialized.
*/



describe('BardAI_class', () => {

    it("test_valid_input",  async () => {
        const bard = new BardAI({cookie: process.env.BARD_COOKIE});
        const generatedText = await bard.generate("Hello", {});
        expect(typeof generatedText).toBe('string');
    });

    
    // Tests that the constructor initializes the class with a valid cookie.
    it("test_constructor_with_valid_cookie", () => {
        const bard = new BardAI({cookie: process.env.BARD_COOKIE});
        expect(bard.name).toBe('Bard');
        expect(bard.initialized).toBe(false);
        expect(bard.session.baseURL).toBe("https://bard.google.com");
        expect(bard.session.headers.Cookie).toBe(`__Secure-1PSID=${process.env.BARD_COOKIE}`);
    });

    // Tests that generate() handles missing parameters correctly.
    it("test_generate_with_missing_parameters", async () => {
        const bard = new BardAI();
        bard.init = jest.fn();
        const result = bard.generate("Hello");
        expect(bard.init).toHaveBeenCalled();
    });

    // Tests that init() throws an error when an invalid cookie is provided to the constructor.
    it("test_init_with_invalid_cookie", async () => {
        const bard = new BardAI({cookie: "invalid_cookie"});
        await expect(bard.init()).rejects.toThrowError("Could not get Google Bard.");
    });

    
});
