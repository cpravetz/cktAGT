// Generated by CodiumAI

const fs = require("fs");

const ModelManager = require('./../managers/modelManager.js');

/*
Code Analysis

Main functionalities:
The ModelManager class is responsible for managing the available models in the system. It loads the models from the 'models' directory, stores them in a dictionary, and provides methods to access them by name. It also sets the activeModel as the default model identified in environment variables.

Methods:
- constructor(): Initializes the ModelManager class by setting the id, models, and activeModel fields. It also calls the loadModels() method to load the available models.
- loadModels(): Loads the models from the 'models' directory using the fs and path modules. It creates an instance of each model and stores it in the models dictionary using the model name as the key.
- getModel(name): Returns the model with the given name from the models dictionary. If the model is not found, it returns false.
- get ModelNames(): Returns a string containing the names of all available models in the system.

Fields:
- models: A dictionary of available models.
- activeModel: The default model identified in environment variables. It is used as the initial task for a new agent and for other tasks not assigned a specific model.
- id: A unique identifier for the ModelManager instance.
*/

const process = require('jest');


describe('ModelManager_class', () => {

    // Tests that all models are loaded successfully. 
    it("test_models_loaded_successfully", () => {
        const modelManager = new ModelManager();
        expect(Object.keys(modelManager.models).length).toBeGreaterThan(0);
    });

    // Tests that the active model is set correctly. 
    it("test_active_model_set_correctly", () => {
        const modelManager = new ModelManager();
        expect(modelManager.activeModel.name).toEqual("gpt-3.5-turbo");
    });

    // Tests that getModel returns false if the requested model does not exist. 
    it("test_nonexistent_model", () => {
        const modelManager = new ModelManager();
        const nonexistentModel = modelManager.getModel("nonexistentModel");
        expect(nonexistentModel).toBeFalsy();
    });

    // Tests that getModel returns the correct model. 
    it("test_get_model_returns_correct_model", () => {
        const modelManager = new ModelManager();
        jest.runAllTimers();
        const testModel = modelManager.getModel("gpt-4");
        expect(testModel.name).toEqual("gpt-4");
    });

    // Tests that the class handles an empty models directory. 
    it("test_empty_models_directory", () => {
        jest.spyOn(fs, "readdirSync").mockReturnValue([]);
        const modelManager = new ModelManager();
        expect(Object.keys(modelManager.models).length).toEqual(0);
    });


});
