// Generated by CodiumAI

const UserManager = require('./../managers/userManager.js');

/*
Test Plan:
- test_request_step_approval_method: Tests that the requestStepApproval method emits the serverNeedsApproval event correctly.  tags: ['happy path']
- test_empty_listener_input_to_add_listener: Tests that the addListener method handles empty listener input correctly.  tags: ['edge case']
- test_invalid_json_input_to_hear_method: Tests that the hear method handles invalid JSON input correctly.  tags: ['edge case', 'general behavior']
*/



describe('UserManager_class', () => {

    // Tests that the constructor initializes all properties correctly. 
    it("test_constructor_initializes_properties", () => {
        const app = "testApp";
        const io = "testIO";
        const userManager = new UserManager(app, io);
        expect(userManager.app).toBe(app);
        expect(userManager.io).toBe(io);
        expect(userManager.asks).toEqual(new Map());
        expect(userManager.listeners).toEqual(new Set());
        expect(userManager.id).toBeDefined();
    });

    // Tests that the addListener method adds a listener to the set correctly. 
    it("test_add_listener", () => {
        const listener = { hear: jest.fn() };
        const userManager = new UserManager();
        userManager.addListener(listener);
        expect(userManager.listeners.size).toBe(1);
        expect(userManager.listeners.has(listener)).toBe(true);
    });

    // Tests that the ask method creates and emits a prompt object correctly. 
    it("test_ask_method", () => {
        const prompt = "testPrompt";
        const choices = ["choice1", "choice2"];
        const allowMultiple = true;
        const lastAsk = {
            id: expect.any(String),
            prompt: prompt,
            choices: choices,
            allowMultiple: allowMultiple
        };
        const sayMock = jest.spyOn(UserManager.prototype, "say");
        const userManager = new UserManager();
        userManager.ask(prompt, choices, allowMultiple);
        expect(sayMock).toHaveBeenCalledWith(lastAsk);
        expect(userManager.asks.size).toBe(1);
        expect(userManager.asks.get(lastAsk.id)).toEqual(lastAsk);
    });

    // Tests that the say method logs and emits a message correctly. 
    it("test_say_method", () => {
        const text = "testText";
        const ioMock = { emit: jest.fn() };
        const userManager = new UserManager(null, ioMock);
        userManager.say(text);
        expect(ioMock.emit).toHaveBeenCalledWith('serverSays', text);
    });

    // Tests that the hear method parses and emits a message to listeners correctly. 
    it("test_hear_method", () => {
        const message = { id: "testId", content: "testContent" };
        const listener1 = { hear: jest.fn() };
        const listener2 = { hear: jest.fn() };
        const userManager = new UserManager();
        userManager.addListener(listener1);
        userManager.addListener(listener2);
        userManager.hear(JSON.stringify(message));
        expect(listener1.hear).toHaveBeenCalledWith(message);
        expect(listener2.hear).toHaveBeenCalledWith(message);
        expect(userManager.asks.has(message.id)).toBe(false);
    });

    // Tests that the announceFile method emits a file object correctly. 
    it("test_announce_file_method", () => {
        const name = "testName";
        const url = "testUrl";
        const ioMock = { emit: jest.fn() };
        const userManager = new UserManager(null, ioMock);
        userManager.announceFile(name, url);
        expect(ioMock.emit).toHaveBeenCalledWith('serverFileAdd', { name: name, url: url });
    });

    // Tests that the requestStepApproval method emits the serverNeedsApproval event correctly.  
    it("test_request_step_approval_method", () => {
        const mockIo = { emit: jest.fn() };
        const userManager = new UserManager(null, mockIo);
        userManager.requestStepApproval();
        expect(mockIo.emit).toHaveBeenCalledWith('serverNeedsApproval', {});
    });

    // Tests that the addListener method handles empty listener input correctly.  
    it("test_empty_listener_input_to_add_listener", () => {
        const userManager = new UserManager(null, null);
        userManager.addListener(null);
        expect(userManager.listeners.size).toBe(0);
    });

    // Tests that the hear method handles invalid JSON input correctly.  
    it("test_invalid_json_input_to_hear_method", () => {
        const mockListener = { hear: jest.fn() };
        const userManager = new UserManager(null, null);
        userManager.addListener(mockListener);
        userManager.hear("invalid json");
        expect(mockListener.hear).not.toHaveBeenCalled();
    });
});
